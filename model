import tensorflow as tf
from tensorflow.keras.layers import *
from tensorflow.keras.models import *
import tensorflow.keras.backend as K

# Define the 3D UNet architecture
def build_3d_unet(input_shape):
    inputs = Input(input_shape)
    # Encoder path
    conv1 = Conv3D(32, (3, 3, 3), padding='same')(inputs)
    bn1 = BatchNormalization()(conv1)
    act1 = PReLU()(bn1)
    pool1 = MaxPooling3D(pool_size=(2, 2, 2),padding='SAME')(act1)

    conv2 = Conv3D(64, (3, 3, 3), padding='same')(pool1)
    bn2 = BatchNormalization()(conv2)               
    act2 = PReLU()(bn2)
    pool2 = MaxPooling3D(pool_size=(2, 2, 2),padding='SAME')(act2)

    conv3 = Conv3D(64, (3, 3, 3), padding='same')(pool2)
    bn3 = BatchNormalization()(conv3)
    act3 = PReLU()(bn3)
    pool3 = MaxPooling3D(pool_size=(2, 2, 2),padding='SAME')(act3)

    conv4 = Conv3D(128, (3, 3, 3), padding='same')(pool3)
    bn4 = BatchNormalization()(conv4)
    act4 = PReLU()(bn4)
    pool4 = MaxPooling3D(pool_size=(2, 2, 2),padding='SAME')(act4)

    conv5 = Conv3D(128, (3, 3, 3), padding='same')(pool4)
    bn5 = BatchNormalization()(conv5)
    act5 = PReLU()(bn5)
    pool5 = MaxPooling3D(pool_size=(2, 2, 2),padding='same')(act5)

    conv6 = Conv3D(256, (3, 3, 3), padding='same')(pool5)
    bn6 = BatchNormalization()(conv6)
    act6 = PReLU()(bn6)

    # Decoder path
    up6 = Conv3DTranspose(128, (2, 2, 2), strides=(2, 2, 2), padding='same')(act6)
    up6 = BatchNormalization()(up6)
    up6 = PReLU()(up6)
    merge6 = concatenate([conv5, up6], axis=-1)

    up7 = Conv3DTranspose(64, (2, 2, 2), strides=(2, 2, 2), padding='same')(merge6)
    up7 = BatchNormalization()(up7)
    up7 = PReLU()(up7)
    merge7 = concatenate([conv4, up7], axis=-1)

    up8 = Conv3DTranspose(64, (2, 2, 2), strides=(2, 2, 2), padding='same')(merge7)
    up8 = BatchNormalization()(up8)
    up8 = PReLU()(up8)
    merge8 = concatenate([conv3, up8], axis=-1)

    up9 = Conv3DTranspose(32, (2, 2, 2), strides=(2, 2, 2), padding='same')(merge8)
    up9 = BatchNormalization()(up9)
    up9 = PReLU()(up9)
    merge9 = concatenate([conv2, up9], axis=-1)
    
    up10 = Conv3DTranspose(2, (2, 2, 2), strides=(2, 2, 2), padding='same')(merge9)

    # Output
    conv_out = Conv3D(1, (1, 1, 1), activation='sigmoid')(up10)

    # Build the model
    model = Model(inputs=inputs, outputs=conv_out)
    return model

input_shape_model=(128,128,128,1)
model=build_3d_unet(input_shape_model)
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.summary()

from sklearn.model_selection import train_test_split

X_train , x_test , Y_train , y_test = train_test_split(x,y,test_size=0.2, random_state=42) 


history=model.fit(X_train,Y_train,epochs=50,batch_size=1,verbose=1)

def dice_coefficient(y_true, y_pred):
    intersection = tf.reduce_sum(y_true * y_pred)
    union = tf.reduce_sum(y_true) + tf.reduce_sum(y_pred)
    dice = (2.0 * intersection + 1e-5) / (union + 1e-5)
    return dice

def dice_loss(y_true, y_pred):
    return 1.0 - dice_coefficient(y_true, y_pred)

model.compile(optimizer='adam', loss=dice_loss, metrics=[dice_coefficient, 'accuracy'])
