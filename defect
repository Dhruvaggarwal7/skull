import os
import random
import numpy as np
import nibabel as nib

def generate_cylindrical_implants(data, radius, height, x_coord, y_coord, z_coord):
    x_ = data.shape[0]
    y_ = data.shape[1]
    z_ = data.shape[2]
    
    full_masking = np.ones(shape=(x_, y_, z_))
    
    cube_masking = np.zeros(shape=(x_, y_, z_))
    for i in range(x_):
        for j in range(y_):
            for k in range(z_):
                if ((i - x_coord) * 2 + (j - y_coord) * 2) <= radius ** 2 and abs(k - z_coord) <= height // 2:
                    cube_masking[i, j, k] = 1

    full_masking[cube_masking == 1] = 0

    return full_masking

def generate_defected_image(radius, height, x_coord, y_coord, z_coord, modified_data):
    header = nib.Nifti1Header()

    full_masking = generate_cylindrical_implants(modified_data, radius, height//2, x_coord, y_coord, z_coord)

    defected_image = full_masking * modified_data

    return defected_image, header

if _name_ == "_main_":
    input_folder = "/path/to/input_folder"
    output_folder = "/path/to/output_folder"
    radius = 10
    height = 500
    z_coord = 30

    os.makedirs(output_folder, exist_ok=True)

    for file_name in os.listdir(input_folder):
        if file_name.endswith(".nii"):
            input_file_path = os.path.join(input_folder, file_name)
            input_nifti = nib.load(input_file_path)
            modified_data = input_nifti.get_fdata().copy()

            x_dim, y_dim, z_dim = modified_data.shape

            x_coord = random.randint(radius, x_dim - radius - 1)
            y_coord = random.randint(radius, y_dim - radius - 1)

            new_data, header = generate_defected_image(radius, height, x_coord, y_coord, z_coord, modified_data)
            
            output_file = os.path.join(output_folder, f"defected_{file_name}")
            output_img = nib.Nifti1Image(new_data, None, header=header)
            nib.save(output_img, output_file)
